{
  "folders":
  [
    {
      "path": "."
    }
  ],
  "settings":
   {
 	 	"ecc_include_file_folder" : false,
  		"ecc_include_file_parent_folder" : false,
	   "ecc_flags_sources":
	   [
      	{
   			"file": "CMakeLists.txt",
         	"search_in": "$project_base_path",
      	},
      ],

   	"ecc_common_flags":
   	[
   		"-I/usr/include",
  	 		"-I/usr/lib/clang/$clang_version/include",
		],

      // Create cscope.out in project directory for CScopeSublime to work. Makefile example follows:
      // #------------------------------------------------------------------------------
      // # Define rules to build a cscope file.
      // #------------------------------------------------------------------------------
      // .PHONY: cscope
      // cscope:
      //     @find .                   \
      //       -path ./misc  -prune -o \
      //       -name "*.c"   -print -o \
      //       -name "*.h"   -print -o \
      //       -name "*.cpp" -print -o \
      //       -name "*.hpp" -print    \
      //       > cscope.files
      //     @/usr/bin/cscope -q -b

      "ClangFormat":
      {
         "format_on_save": true,
         "style": "File"   // Get settings from .clang-format file in project root.
      },

      "todoreview":
      {
         "exclude_folders":
         [
            ".git"
         ],
         "patterns":
         {
            // Create a custom SMF pattern, and add the Doxy @todo to the default.
            "SMF-TODO": "@todo[\\s]*?[\\s]*SMF:(?P<smftodo>.*)$",
            "TODO": "(TODO|@todo)[\\s]*:*[\\s]*(?P<todo>.*)$"
         },
      },
   },

   "build_systems":
   [
      // Build targets for the XXX architecture.
      {
         "working_dir": "$project_path",
         "file_regex": "^(..[^:\n]*):([0-9]+):?([0-9]+)?:? (.*)$",
         "syntax" : "Packages/User/c++output.tmLanguage",

         "name": "Make",
         "shell_cmd": "cmake -E make_directory build && cmake -E chdir build cmake .. && cmake --build build",

         "variants":
         [
         	{
         		"name": "clean",
         		"shell_cmd": "cmake -E remove_directory build"
         	},
         	{
         		"name": "libPrint",
         		"shell_cmd": "cmake --build build --target Print"
         	},
         	{
         		"name": "libPrint clean",
         		"shell_cmd": "cmake -E remove_directory build/libPrint"
         	},
         	{
         		"name": "hello_world",
         		"shell_cmd": "cmake --build build --target hello_world"
         	},
         	{
         		"name": "hello_world clean",
         		"shell_cmd": "cmake -E remove_directory build/hello_world"
         	},
         ]
      },
      {
         "working_dir": "$project_path",
         "file_regex": "^(..[^:\n]*):([0-9]+):?([0-9]+)?:? (.*)$",
         "syntax" : "Packages/User/c++output.tmLanguage",

         "name": "Run",
         "shell_cmd": "echo Needs to be defined!",

         "variants":
         [
         // 	{
		       //   "name": "hello_world",
 		      //   	"shell_cmd": "build-host/hello_world/hello_world",
 		     	// },
         ]
      },
   ],
}
